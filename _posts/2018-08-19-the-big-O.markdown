---
layout: post
title:  "The big O"
date:   2018-08-19 20:13:21
categories: programming
tags: featured
image: /assets/article_images/2014-08-29-welcome-to-jekyll/desktop.JPG
---

So you worked extremely hard to save more `CPU` cycle in the central loop but your code still slowly ? I think that you need to know more about `time complexity` . 

"Hey, but what's time complexity ?"

Time complexity is related how your code spend time, memory and cpu according of size of input. For example, if we will want to answer some questions such as " If my algorithm spends 1 minute to process a 1000-byte input, how many minutes does it spend to process 2000-byte input ?" 

A direct way of calculating complexity would be to find some formula that gives the exact number of operations done by the algorithm to arrive  at the result, depending on the size of the input. 

{% highlight ruby %}
 for(i=0; i<N; i++){
     print(i);
 }
{% endhighlight %}

So we could say that time spent is 

{% highlight ruby %}
T(N) =
    N*(time spent by a comparison betwhen i and N) +
    N*(time spent to increase i) +
    N*(time spent by a print)
{% endhighlight %}

However, it takes a lot work to make a super accurate account of these and usually neither is it worth it. For example, suppose we've worked hard and discovered that a certain algorithm spends time. 

{% highlight ruby %}
 T(N) = 10*N² + 137*N + 15
{% endhighlight %}

In this case the quadratic term `10 * N²` is more important than the others because for almost any value of `N` it will dominate the `sum` total. From `N ≥ 14` the quadratic term is already responsible for most of the execution time and for `N > 1000` it is already responsible for more than 99%. For estimation purposes we could simplify the formula for `T (N) = 10 * N²` without losing much.

A Big-O function is a mathematical term that gives a rough estimation of how the speed of an algorithm changes with the size of the input data.

Check out the [Big O notation][big-o-notation] for more info on how to get the most out of 

[big-o-notation]: http://web.mit.edu/16.070/www/lecture/big_o.pdf
